// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int i;
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let i = 1;
		while(i < 16){
		    let twoToThe[i] = twoToThe[i-1] +  twoToThe[i-1];
			let i = i + 1;
        }
        return ;
    }

    // Returns true if the i-th bit of x is 1, false otherwise
    function boolean bit(int x, int i){
        if ((x & twoToThe[i]) = 0){
            return false;
        }
        else{
            return true;
        }

    }

    /**Return the ith power of 2*/
    function int power(int i){
        return twoToThe[i];
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x<0){
            return -x;
        }
        else{
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y){
        var int sum, i;
        let sum = 0;
        let i = 0;
        while (i<16){
           if (Math.bit(y,i)){
                let sum = sum +x;
           }
           let x = x + x;
           let i = i+1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int sign, result, x_abs, y_abs;
        let sign = 1; //the defult sign is 1,which means positive
        if (((x<0)&(y>0))|((x>0)&(y<0))) {
            let sign = 0;
        }
        let x_abs = Math.abs(x);
        let y_abs = Math.abs(y);
        let result = Math.dividePositives(x_abs, y_abs);
        if (sign = 1){
            return result;
        }
        else{
            return -result;
        }
    }

    function int dividePositives(int x, int y){
        var int q;
        if ((y>x)|(y<0)){
            return 0;
        }
        let q = Math.dividePositives(x,(y + y));
        if ((x - (2 * q * y)) < y){
            return 2 * q;
        }
        else{
            return (2*q)+1;
        }
    }


    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y,j,two_power,current;
        let y = 0;
        let j = 8;
        if (x=0){
            return 0;
        }
        while (j>0){
            let j = j-1;
            let two_power = twoToThe[j];
            let current = y+two_power;
            if ((~(Math.multiply(current,current)>x))&Math.multiply(current,current)>0){
                let y = current;
            }
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a>b){
            return a;
        }
        else{
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a<b){
            return a;
        }
        else{
            return b;
        }
    }
}
