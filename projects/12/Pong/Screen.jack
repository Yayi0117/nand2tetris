// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        do Screen.setColor(false);
        do Screen.drawRectangle(0,0,512,255);
        do Screen.setColor(true);
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, bit, div16;
        let div16 = x / 16;
        let address = 16384 + (y * 32) + div16;
        let bit = x - (div16 * 16);
        if(color) {
        do Memory.poke(address, Memory.peek(address) | Math.power(bit));
        }
        else {
        do Memory.poke(address, Memory.peek(address) & (~Math.power(bit)));
        }
        return;
  }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
    if ((x1 = x2) | (y1 = y2)) {
        do Screen.drawAxialLine(x1, y1, x2, y2);
    } else {
        do Screen.drawDiagLine(x1, y1, x2, y2);
    }
      return;
    }

    function void drawDiagLine(int x1, int y1, int x2, int y2) {
      var int diff, height, width, dx, dy, right, down, tmp;

      let dy = Math.abs(y2 - y1);
      let dx = Math.abs(x2 - x1);
      let right = x1 < x2;
      let down = y1 < y2;

      if (~right & ~down) {
        let tmp = x1;
        let x1 = x2;
        let x2 = tmp;
        let tmp = y1;
        let y1 = y2;
        let y2 = tmp;
      } else {
        if (~right & down) {
          let tmp = x1;
          let x1 = x2;
          let x2 = tmp;
          let tmp = y1;
          let y1 = y2;
          let y2 = tmp;
        }
      }

      while (~(height > dy) & ~(width > dx)) {
        if (y1 < y2) {
          do Screen.drawPixel(x1 + width, y1 + height);
        } else {
          do Screen.drawPixel(x1 + width, y1 - height);
        }

        if (diff < 0) {
          let width = width + 1;
          let diff = diff + dy;
        } else {
          let height = height + 1;
          let diff = diff - dx;
        }
      }

      return;
    }

    function void drawAxialLine(int x1, int y1, int x2, int y2) {
      var int tmp;

      if ((x1 = x2) & (y1 > y2)) {
        let tmp = y1;
        let y1 = y2;
        let y2 = tmp;
      } else {
        if ((y1 = y2) & (x1 > x2)) {
          let tmp = x1;
          let x1 = x2;
          let x2 = tmp;
        }
      }

      if (x1 = x2) {
        let tmp = y1;
        while (~(tmp > y2)) {
          do Screen.drawPixel(x1, tmp);
          let tmp = tmp + 1;
        }
      } else {
        if (y1 = y2) {
          let tmp = x1;
          while (~(tmp > x2)) {
            do Screen.drawPixel(tmp, y1);
            let tmp = tmp + 1;
          }
        }
      }

      return;
    }
    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int b,dy;
        let b=0;
        let dy = y2 - y1;
        while(~(b>dy)){
            do Screen.drawLine(x1,y1+b,x2,y1+b);
            let b=b+1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy,sqr;
        let dy = -r;
        if (~(r>181)){
            while(~(dy>r)){
                let sqr = Math.sqrt((r*r)-(dy*dy));
                do Screen.drawLine(x-sqr, y+dy, x+sqr, y+dy);
                let dy = dy +1;
            }
        }
        return;
    }
}
