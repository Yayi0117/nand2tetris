// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/MyApp/Carrot.jack

/** Implements a graphical carrot. */
class Carrot {

   field int x, y,memAddress; // screen location of the carrot
   /** Constructs a new carrot with a given location */
   constructor Carrot new(int Ax, int Ay) {
      let x = Ax;
      let y = Ay;
      do draw();
      return this;
   }

   /** Disposes this carrot. */
   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }


   /** Draws the carrot on the screen. */
   method void draw() {
      let memAddress = 16384+Math.multiply(32, y) + Math.divide(x, 16);
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 0);
      do Memory.poke(memAddress+64, 12288);
      do Memory.poke(memAddress+96, 18432);
      do Memory.poke(memAddress+128, -21760);
      do Memory.poke(memAddress+160, -27520);
      do Memory.poke(memAddress+192, 26944);
      do Memory.poke(memAddress+224, 4640);
      do Memory.poke(memAddress+256, 8208);
      do Memory.poke(memAddress+288, 8200);
      do Memory.poke(memAddress+320, 4168);
      do Memory.poke(memAddress+352, 2180);
      do Memory.poke(memAddress+384, 1316);
      do Memory.poke(memAddress+416, 834);
      do Memory.poke(memAddress+448, 194);
      do Memory.poke(memAddress+480, 60);
	return;
}

   /** Erases the carrot from the screen. */
   method void erase() {
      let memAddress = 16384+Math.multiply(32, y) + Math.divide(x, 16);
         do Memory.poke(memAddress+0, 0);
         do Memory.poke(memAddress+32, 0);
         do Memory.poke(memAddress+64, 0);
         do Memory.poke(memAddress+96, 0);
         do Memory.poke(memAddress+128, 0);
         do Memory.poke(memAddress+160, 0);
         do Memory.poke(memAddress+192, 0);
         do Memory.poke(memAddress+224, 0);
         do Memory.poke(memAddress+256, 0);
         do Memory.poke(memAddress+288, 0);
         do Memory.poke(memAddress+320, 0);
         do Memory.poke(memAddress+352, 0);
         do Memory.poke(memAddress+384, 0);
         do Memory.poke(memAddress+416, 0);
         do Memory.poke(memAddress+448, 0);
         do Memory.poke(memAddress+480, 0);
      return;
   }
}
